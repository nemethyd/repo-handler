# myrepo.cfg - Configuration file for myrepo.sh
# The default values are given below, commented out.
# To configure, uncomment the desired lines and change the values.

# === DIRECTORY CONFIGURATION ===
# All directory paths must exist and be writable by the user running the script.
# In user mode (USER_MODE=1), run the entire script with sudo (sudo ./myrepo.sh --user-mode).
# In default mode (USER_MODE=0), run script normally and it will use sudo internally when needed.

# Set the local repository path (base directory containing the repository tree)
# LOCAL_REPO_PATH="/repo"
# IMPORTANT: This directory and all its subdirectories must be writable.
# This is the base path that contains individual repositories (defined in MANUAL_REPOS).
# The script will validate write permissions for:
# - The main directory (LOCAL_REPO_PATH)
# - Each repository subdirectory (LOCAL_REPO_PATH/<repo_name>)  
# - getPackage subdirectories (LOCAL_REPO_PATH/<repo_name>/getPackage)
# - repodata subdirectories (LOCAL_REPO_PATH/<repo_name>/repodata)
# Fix permissions with: sudo chown -R $(whoami):$(id -gn) /repo

# Set the shared repository path
# SHARED_REPO_PATH="/mnt/hgfs/ForVMware/ol9_repos"
# IMPORTANT: This directory must be writable for repository synchronization.
# Write permission failures here will generate warnings but won't stop execution.
# The script performs practical write tests by creating temporary files.

# Define manual repositories (comma-separated)
# MANUAL_REPOS="ol9_edge"
# IMPORTANT: Each repository listed here should have a corresponding directory
# under LOCAL_REPO_PATH (e.g., /repo/ol9_edge/getPackage). Missing directories will generate warnings.
# MANUAL_REPOS are individual repositories within the LOCAL_REPO_PATH tree that can be manually managed.

# Set the RPM build path
# RPMBUILD_PATH="/home/nemethy/rpmbuild/RPMS"
# NOTE: This path is validated but write access is not strictly required.

# === PERMISSION VALIDATION ===
# The script performs comprehensive permission validation during startup:
# 
# 1. Directory Existence Check:
#    - Verifies all configured paths exist and are directories
#    - Reports missing directories as errors (LOCAL_REPO_PATH) or warnings (others)
#
# 2. Write Permission Check:
#    - Tests basic write permissions using filesystem flags
#    - Performs practical write tests by creating temporary files
#    - Validates access to repository subdirectories (getPackage, repodata)
#
# 3. User Mode vs Root Mode:
#    - USER_MODE=1: Run entire script with sudo (sudo ./myrepo.sh --user-mode)
#    - USER_MODE=0: Run script normally, it uses sudo internally when needed
#
# 4. Error Handling:
#    - LOCAL_REPO_PATH permission errors will cause script exit (critical)
#    - SHARED_REPO_PATH permission errors generate warnings only (non-critical)
#    - Subdirectory permission errors are reported with fix suggestions

# === USER MODE AND PERMISSIONS ===
# Run without sudo privileges (1 = true, 0 = false)
# USER_MODE=0
# IMPORTANT: Both modes require sudo privileges. The difference is how sudo is used.
# Default mode (USER_MODE=0): Run script normally, it uses sudo internally (recommended).
# User mode (USER_MODE=1): Run entire script with sudo (sudo ./myrepo.sh --user-mode).

# === USER MODE AND PERMISSIONS ===

# Run in user mode (requires running entire script with sudo) (1 = true, 0 = false)
# USER_MODE=0
# When USER_MODE=1:
# - Run the script with: sudo ./myrepo.sh --user-mode
# - Script assumes it already has elevated privileges
# When USER_MODE=0 (default):
# - Run the script normally: ./myrepo.sh
# - Script will use sudo internally when needed
# - Script assumes elevated privileges and won't prefix commands with sudo
# - All operations run with elevated permissions
# When USER_MODE=0 (default):
# - Script runs with normal user permissions initially
# - Uses sudo internally for operations that require elevated privileges

# === DEBUG AND LOGGING ===

# Set verbosity level (controls how much output is shown)
# 0=critical only, 1=important, 2=normal, 3=verbose, 4=very verbose
# Message types determine the display symbol: [E]rror, [W]arning, [S]uccess, [I]nfo, [P]rogress, [A]ction, [U]pdate, [D]ebug
# DEBUG_LEVEL=1

# Set maximum number of packages to process (0 = no limit)
# MAX_PACKAGES=0

# Set batch size for processing (optimized default: 50)
BATCH_SIZE=25

# Set the number of parallel processes
# PARALLEL=2

# Enable dry run (1 = true, 0 = false)
# DRY_RUN=0

# Continue execution on error (0 = halt on errors, 1 = continue despite errors)
# CONTINUE_ON_ERROR=0

# === REPOSITORY CONFIGURATION ===
# These settings control the behavior of repository management and package processing.

# Define excluded repositories (comma-separated)
# These repositories will be ignored and removed if found in LOCAL_REPO_PATH
# EXCLUDED_REPOS="copr:copr.fedorainfracloud.org:wezfurlong:wezterm-nightly,code"

# enforce full rebuild (1 = true, 0 = false)
# This will remove all packages in the local repository before rebuilding
# FULL_REBUILD=0

# Group consecutive EXISTS package outputs by repository (1 = enabled, 0 = disabled)
# Default is enabled (1). Set to 0 to show individual package messages instead.
# GROUP_OUTPUT=0

# Cache settings
# CACHE_MAX_AGE_HOURS=1              # Default cache age in hours (day time)
# CACHE_MAX_AGE_HOURS_NIGHT=4        # Cache age in hours during night time (22:00-06:00)
# NIGHT_START_HOUR=22                # Hour when night time starts (22 = 10 PM)
# NIGHT_END_HOUR=6                   # Hour when night time ends (6 = 6 AM)
# CACHE_CLEANUP_DAYS=7               # Days after which cache files are cleaned up

# Performance and timing settings
# JOB_WAIT_REPORT_INTERVAL=60        # Seconds before reporting potentially slow jobs
# REPOQUERY_PARALLEL=2               # Number of parallel repoquery jobs (default: 2)

# DNF timeout and retry settings
# DNF_TIMEOUT_SECONDS=300             # Timeout for DNF operations in seconds (default: 300 = 5 minutes)
# DNF_MAX_RETRIES=3                   # Maximum number of retry attempts for DNF operations (default: 3)
# DNF_RETRY_DELAY=5                   # Base delay between retries in seconds (multiplied by attempt number)
# CURL_TIMEOUT_SECONDS=10             # Timeout for curl operations in seconds (default: 10)
# SUDO_TIMEOUT_SECONDS=10             # Timeout for sudo operations in seconds (default: 10)

# Repository metadata compression type (default: zstd)
# Supported values: gz (gzip), zstd, xz, bz2
# zstd provides best compression ratio and speed for modern systems
# REPO_COMPRESS_TYPE=zstd

# Manual Repository Management Settings
# These settings control how manual repositories (defined in MANUAL_REPOS) are handled
# for automatic detection and metadata updates when packages are manually added.

# Enable automatic detection and update of manual repository changes (1 = enabled, 0 = disabled)
# When enabled, the script will check manual repositories for manual changes even if no packages
# were processed during the current run. Useful for repositories where RPMs are manually copied.
# AUTO_UPDATE_MANUAL_REPOS=1

# Local repository metadata check method (FAST or ACCURATE)
# FAST: Uses timestamp comparison between RPM files and metadata (faster, good for most cases)
# ACCURATE: Uses content comparison to detect count mismatches (more thorough but slower)
# Default is FAST for optimal performance while still catching most manual changes.
# LOCAL_REPO_CHECK_METHOD=FAST

# Adaptive Performance Tuning Settings
# These settings control the adaptive batch size and parallelism mechanism that automatically
# adjusts processing parameters based on performance metrics to optimize throughput.

# Enable adaptive tuning (1 = enabled, 0 = disabled)
# When enabled, the script will dynamically adjust BATCH_SIZE and PARALLEL based on performance
ADAPTIVE_TUNING=1

# Minimum batch size for adaptive tuning (optimized default: 20)
# The adaptive mechanism will not reduce batch size below this value
# MIN_BATCH_SIZE=20

# Maximum batch size for adaptive tuning  
# The adaptive mechanism will not increase batch size above this value
# MAX_BATCH_SIZE=100

# Minimum number of parallel processes for adaptive tuning
# The adaptive mechanism will not reduce parallelism below this value
# MIN_PARALLEL=1

# Maximum number of parallel processes for adaptive tuning
# The adaptive mechanism will not increase parallelism above this value
# MAX_PARALLEL=8

# Number of performance samples to collect before making adjustments
# A larger sample size provides more stable performance measurements but slower adaptation
# PERFORMANCE_SAMPLE_SIZE=5

# Interval for running adaptive tuning adjustments (in number of batches processed)
# Tuning will be performed every N batches to avoid excessive adjustments
# TUNE_INTERVAL=3

# Efficiency threshold percentage for adaptive tuning (optimized default: 60)
# If efficiency drops below this percentage, the adaptive mechanism will attempt adjustments
# Lower values make the system more aggressive about optimizing performance
# EFFICIENCY_THRESHOLD=60